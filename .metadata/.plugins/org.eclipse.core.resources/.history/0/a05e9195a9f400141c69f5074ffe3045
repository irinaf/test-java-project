

package com.example.tests;



import java.util.*;

import  static org.testng.Assert.assertEquals;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;


	public class GroupCreationTests extends TestBase {
	 
		@DataProvider
		public Iterator<Object[]> randomValidGroupGenerator(){
			List<Object[]>list= new ArrayList<Object[]>();
		    Random rnd =new Random();
			
			for( int i =0;i<5;i++){
				GroupData group = new GroupData();
				group.name=generateRandomString();							
				group.header=generateRandomString();
				group.footer=generateRandomString();
				list.add(new Object[]{group});
			}
				
			return list.iterator();
		}
		
		
		public String generateRandomString(){
			
			Random rnd =new Random();
			if(rnd.nextInt(3)==0){
				return"";
			}
			else return "test"+ rnd.nextInt();
			
		}
		
		
	@Test(dataProvider="randomValidGroupGenerator")
	  public void testGroupCreationWithValidData(GroupData group) throws Exception {
		 app.getNavigationHelper().openMainPage();
	     app.getNavigationHelper().gotoGroupPage();
	    
	     // save old
	     List<GroupData> oldList=app.getGroupHelper().getGrous();
	     
	     //action
	     app.getGroupHelper().initGroupCreation();
	    
		app.getGroupHelper().fillGroupForm(group);
	    app.getGroupHelper().submitGroupCreation();
	    app.getGroupHelper().returnToGroupPage();
	  
	    // save new
	     List<GroupData> newList=app.getGroupHelper().getGrous(); 
	    
	     //compare
	     //assertEquals(newList.size(),oldList.size()+1); -проверка на размер
	     oldList.add(group);
	    Collections.sort(oldList);
	    assertEquals(newList,oldList);
	  }
	
}